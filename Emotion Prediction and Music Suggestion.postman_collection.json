{
	"info": {
		"_postman_id": "e3b22fc1-6c75-407b-9356-80361204b9c7",
		"name": "Emotion Prediction and Music Suggestion",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "emotion_detection using tensorflow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();",
							"console.log(response);",
							"let maxValue=0, maxProp=\"None\";",
							"for (var prop in response) {",
							"  if (response.hasOwnProperty(prop)) {",
							"    var value = response[prop]",
							"    if (value > maxValue) {",
							"      maxProp = prop",
							"      maxValue = value",
							"    }",
							"  }",
							"}",
							"pm.environment.set(\"emotion\", maxProp);",
							"pm.environment.set(\"emotionProb\", maxValue);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "*/*",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/Users/gphars/Pictures/170915-anger-screaming-stock-njs-12p_b54ffc85cdc4c9170a757211f51069f2.jpg"
						},
						{
							"key": "body",
							"value": "ds",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8080/api/emotion_detection/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"emotion_detection",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Mock GeoLocation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();",
							"    console.log(response);",
							"",
							"var latDict={};",
							"var longDict={};",
							"for (var data in response) {",
							"  var prop = response[data];",
							"  latDict[prop.country] = prop.latitude;",
							"  longDict[prop.country] = prop.longitude;",
							"}",
							"console.log(latDict);",
							"console.log(longDict);",
							"pm.environment.set(\"latDict\", JSON.stringify(latDict));",
							"pm.environment.set(\"longDict\", JSON.stringify(longDict));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_server}}/GeoLocation",
					"host": [
						"{{mock_server}}"
					],
					"path": [
						"GeoLocation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Music Charts Visualization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template=`",
							"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">",
							"<style>",
							".card-img-top { ",
							"    width: 300px;",
							"}",
							".card {",
							"        margin: 0 auto; ",
							"        float: none; ",
							"        margin-bottom: 10px; ",
							"         font-size:14px;",
							"         color: #ffffff;",
							"        background-color: #5271C2;",
							"}",
							".card-horizontal {",
							"    display: flex;",
							"    flex: 1 1 auto;",
							"}",
							".number{",
							"    color: #aa9e5c;",
							"    margin-left:5px;",
							"    font-size:14px;",
							"    font-weight: bold;",
							"}",
							"body { ",
							"    background-color: white;",
							"}",
							".title { ",
							"    font-size: 30px;",
							"    font-family: \"Roboto\", sans-serif;",
							"    text-align: center;",
							"}",
							".container {",
							"    display: flex;",
							"    flex-direction: row;",
							"    justify-content: center;",
							"    align-items: center;",
							"}",
							".directions {",
							"    font-size: 18px;",
							"    font-family: \"Roboto\", sans-serif;",
							"    padding-left: 20px;",
							"}",
							"#backgroundRectangle {",
							"    width: 100%;",
							"    height: 100%;",
							"    fill: #f5f5f5;",
							"}",
							".projectionOutline{",
							"    fill: #2f434a;",
							"    stroke: #4e5f66",
							"}",
							".tooltip {",
							"    position: absolute;",
							"    font-size: 12px;",
							"    width: auto;",
							"    height: auto;",
							"    pointer-events: none;",
							"    background-color: white;",
							"    padding: 3px;",
							"}",
							"",
							"</style>",
							"<h1 class=\"title\"></h1>",
							"<div class=\"container\">",
							"<div id=\"map\"></div>",
							"<p class=\"directions\">Draw mouse to zoom in onto section. Double click to zoom out</p>",
							"</div>",
							"   ",
							"    <table class=\"table responsive\" id=\"sort\">",
							"  <thead>",
							"    <tr>",
							"      <th scope=\"col\">Country</th>",
							"      <th scope=\"col\">City</th>",
							"      <th scope=\"col\">Chart</th>",
							"      <th scope=\"col\">Play</th>",
							"    </tr>",
							"  </thead>",
							"  <tbody>",
							"   {{#each parsedData}}",
							"    <tr>",
							"      <td>{{country}}</td>",
							"      <td>{{city}}</td>",
							"      <td>{{listid}}</td>",
							"      <td><div class=\"audioplay-object\">",
							"  <div class=\"audioplay-button\"></div>",
							"  <audio class=\"audioplay-player\">",
							"    <!-- AudioPlay2 player. Visit https://strangecube.com/audioplay2/ -->",
							"    <source src=\"https://strangecube.com/audioplay2/player/music/music.ogg\" />",
							"    <source src=\"https://strangecube.com/audioplay2/player/music/music.mp3\" />",
							"    Your browser doesn't support &lt;audio&gt; element.",
							"  </audio>",
							"</div></td>",
							"    </tr>",
							"    {{/each}} ",
							"  </tbody>",
							"</table>",
							"</div>",
							"",
							"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
							"<script src=\"https://unpkg.com/topojson@3\"></script>",
							"<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"></script>",
							"<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"></script>",
							"<script src=\"https://strangecube.com/audioplay2/player/js/audioplay-2.0.0.min.js\"></script>",
							"",
							"<script>",
							"",
							"    pm.getData( function(err, value) {",
							"        d3.select(\".title\").html(value.title);",
							"        initVisualization(value.data);",
							"    });",
							"",
							"    // Function call that contains our visualization, necessary because we are loading an external map file",
							"    async function initVisualization(pmInput){",
							"        const response = await fetch(\"https://unpkg.com/world-atlas@1.1.4/world/110m.json\");",
							"        response.json().then( data => {",
							"            generateVisualization(pmInput, data);",
							"        });",
							"    }",
							"    ",
							"    // Generates d3 map visualization using an external map file and user-inputed data",
							"    // Utilizes d3.zoom and d3.brush",
							"    function generateVisualization(pmInput, mapData){",
							"        // Set the dimensions and margins of the graph",
							"        const margins = {top: 20, left: 10, right: 20, bottom: 20};",
							"        const width = 800 - margins.top - margins.bottom;",
							"        const height = 500 - margins.left - margins.right;",
							"        ",
							"        // Initializes d3.zoom to cover entire map SVG",
							"        const zoom = d3.zoom()",
							"            .scaleExtent([1,40])",
							"            .translateExtent([[0,0],[width + margins.left + margins.right, height + margins.top + margins.bottom]])",
							"            .extent([[0,0],[width + margins.left + margins.right, height + margins.top + margins.bottom]])",
							"            .on(\"zoom\", () =>{",
							"                d3.select(\"#map-group\").attr(\"transform\", d3.event.transform)",
							"            })",
							"        ",
							"        // Initiaizes d3.brush to cover entire map SVG and zoom in on the selected window",
							"        let brush = d3.brush()",
							"            .extent([[0,0],[width + margins.left + margins.right, height + margins.top + margins.bottom]])",
							"            .on(\"end\", () => {",
							"                let extent = d3.event.selection;",
							"                if(extent){",
							"                    d3.select(\"#map-group\").call(brush.move, null);",
							"                    d3.select(\"#map-group\").transition().duration(1500).call(zoom.transform, d3.zoomIdentity",
							"                        .scale( (width + margins.left + margins.right)/ (extent[1][0]-extent[0][0]) )",
							"                        .translate( -extent[0][0], -extent[0][1] ));",
							"                    d3.selectAll(\"circle\").transition().delay(750).duration(1000)",
							"                        .attr(\"r\", d => { return 2 * d.circleSize * (extent[1][0]-extent[0][0])/(width + margins.left + margins.right);} )",
							"                        .attr(\"stroke-width\", (extent[1][0]-extent[0][0])/(width + margins.left + margins.right));",
							"                    ",
							"                }",
							"                else{",
							"                    d3.select(\"#map-group\").transition().duration(1500).call(zoom.transform, d3.zoomIdentity",
							"                        .scale( 1 )",
							"                        .translate( 0,0 ));",
							"                    d3.selectAll(\"circle\").transition().delay(750).duration(1000)",
							"                        .attr(\"r\", d => d.circleSize)",
							"                        .attr(\"stroke-width\", 1);",
							"                }",
							"            });",
							"        ",
							"        // Set the dimensions and margins of the graph",
							"        let svg = d3.select(\"#map\")",
							"          .append(\"svg\")  ",
							"            .attr(\"width\", width + margins.left + margins.right)",
							"            .attr(\"height\", height + margins.top + margins.bottom)",
							"        svg.append(\"rect\")",
							"            .attr(\"id\", \"backgroundRectangle\");",
							"        svg = svg.append(\"g\")",
							"            .attr(\"id\", \"map-group\")",
							"            .call(brush);",
							"        ",
							"        // Draws Mercator projection of map onto SVG using the inputted map file",
							"        let projection = d3.geoMercator().translate([400, 350]).scale(125);",
							"        var mapGroup = svg.append(\"g\");",
							"        let mapPath = d3.geoPath().projection(projection);",
							"        mapGroup.selectAll(\"path\")",
							"            .data(topojson.feature(mapData, mapData.objects.countries).features)",
							"            .enter()",
							"          .append(\"path\")",
							"            .attr(\"d\", mapPath)",
							"            .attr(\"class\", \"projectionOutline\");",
							"        ",
							"        // Calculate offset for tooltip",
							"        const rect = document.getElementById(\"map\").getBoundingClientRect();",
							"        const offset = {top: rect.top, left: rect.left};",
							"        ",
							"        // Create hover tooltip",
							"        let tooltip = d3.select(\"#map\").append(\"div\")",
							"            .attr(\"class\", \"tooltip\");",
							"        // tooltip mouseover event handler",
							"        let tipMouseover = function(d){",
							"            tooltip.html(\"Longitude: <b>\" + d.long + \"</b><br/>Latitude: <b>\" + d.lat + \"</b>\")",
							"                .style(\"left\", (d3.event.pageX + 15 - offset.left) + \"px\")",
							"                .style(\"top\", (d3.event.pageY - 20 - offset.top) + \"px\")",
							"              .transition()",
							"                .duration(200)      // ms",
							"                .style(\"opacity\", 0.9)",
							"            d3.select(this)",
							"                .style(\"stroke\", \"white\")",
							"                .style(\"opacity\", 1);",
							"        };",
							"        // tooltip mouseout event handler",
							"        let tipMouseout = function(d){",
							"            tooltip.transition()",
							"                .duration(300)",
							"                .style(\"opacity\", 0);",
							"            d3.select(this)",
							"                .style(\"stroke\", \"none\")",
							"                .style(\"opacity\", 0.6);",
							"        };",
							"        ",
							"        // Appends points from user-inputted data onto map",
							"        svg.selectAll(\"circle\")",
							"            .data(pmInput)",
							"            .enter()",
							"          .append(\"circle\")",
							"            .attr(\"r\", 0)",
							"            .style(\"fill\", d => d.color)",
							"            .attr(\"cx\", d => projection([d.long, d.lat])[0])",
							"            .attr(\"cy\",  d => projection([d.long, d.lat])[1])",
							"            .style(\"opacity\", 0.6)",
							"            .on(\"mouseover\", tipMouseover)",
							"            .on(\"mouseout\", tipMouseout)",
							"          .transition(d3.transition().duration(1000).ease(d3.easeQuadOut))",
							"            .attr(\"r\", d => d.circleSize)",
							"    }",
							"</script>",
							"",
							"`;",
							"var latDict = JSON.parse(pm.environment.get('latDict'))",
							"var longDict = JSON.parse(pm.environment.get('longDict'))",
							"",
							"",
							"var response = pm.response.json()['countries'];",
							"let parsedData = [];",
							"let mapData =[]",
							"//data parsing",
							"for (let data of response){",
							"    let tempEntry = {};",
							"    let trackCount = {};",
							"    tempEntry.country= data.name;",
							"    let ct=0;",
							"    for(let data1 of data.cities){",
							"      tempEntry.city = data1.name;",
							"      tempEntry.listid = data1.listid;",
							"      tempEntry.color = \"#F8DBEF\";",
							"      tempEntry.id = data1.id;",
							"      parsedData.push(tempEntry);",
							"      ct=ct+1;",
							"    }",
							"    trackCount.circleSize = Math.abs(Math.ceil(ct/10));",
							"    trackCount.country = data.name;",
							"    trackCount.lat = latDict[data.id];",
							"    trackCount.long = longDict[data.id];",
							"    trackCount.color = \"#fc031c\";",
							"    mapData.push(trackCount);",
							"",
							"}",
							"",
							"console.log(mapData);",
							"// Set visualizer",
							"pm.visualizer.set(template, {",
							"    // Pass the response body parsed as JSON as `data`",
							"    parsedData: parsedData,",
							"    data: mapData,",
							"        title: \"Map for Music Charts\"",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-rapidapi-host",
						"value": "{{rapid-host}}"
					},
					{
						"key": "x-rapidapi-key",
						"value": "{{rapid-api-key}}"
					}
				],
				"url": {
					"raw": "https://shazam.p.rapidapi.com/charts/list",
					"protocol": "https",
					"host": [
						"shazam",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"charts",
						"list"
					]
				}
			},
			"response": []
		}
	]
}